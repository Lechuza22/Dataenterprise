import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import seaborn.objects as so
import folium
from streamlit_folium import st_folium

# -----------------------------
# CONFIGURACION INICIAL
# -----------------------------
st.set_page_config(page_title="üìä DataEnterprise", page_icon="üè¢", layout="wide")

# -----------------------------
# LOGIN SIMPLE
# -----------------------------
st.title("üîê Acceso privado")

password = st.text_input("Ingres√° la clave para acceder a la app:", type="password")

# Verificamos clave contra secrets
if password == st.secrets["acceso"]["clave"]:
    st.success("Acceso concedido ‚úÖ")

    # -----------------------------
    # MENU PRINCIPAL
    # -----------------------------
    menu = st.sidebar.selectbox("üìÇ Secciones", [
        "Inicio",
        "An√°lisis exploratorio",
        "An√°lisis cruzado",
        "Modelos de ML",
        "Mapa de sucursales",
        "Descargas"
    ])

    st.sidebar.markdown("---")
    st.sidebar.markdown("üë§ Usuario: due√±o")

    # -----------------------------
    # CONTENIDO POR SECCION
    # -----------------------------
    if menu == "Inicio":
        st.header("üìä DataEnterprise - Proyecto de An√°lisis de Datos Empresariales")
        st.markdown("Bienvenido al panel interactivo de an√°lisis, exploraci√≥n y predicci√≥n.")
        st.markdown("Us√° el men√∫ de la izquierda para navegar por las secciones.")

    elif menu == "An√°lisis exploratorio":
        st.header("üìà An√°lisis exploratorio de datos (EDA)")

        dataset_opcion = st.selectbox("Seleccion√° el dataset a explorar:", [
            "Clientes", "Compras", "Empleados", "Gastos", "Productos", "Proveedores", "Sucursales", "Ventas"
        ])

        if dataset_opcion == "Clientes":
            st.subheader("üßç‚Äç‚ôÇÔ∏è Exploraci√≥n de Clientes")
            st.markdown("‚úÖ Conclusiones preliminares del an√°lisis del dataset Clientes: - Edad promedio de los clientes es de 40 a√±os, con una alta concentraci√≥n entre los 25 y 55.\n- Hay una clara concentraci√≥n geogr√°fica en el AMBA, especialmente Ciudad de Buenos Aires.\n- El 100% de los clientes est√°n activos (no hay marca de baja).\n- La diversidad de localidades es grande (527), pero unas pocas concentran la mayor√≠a.\n- La base de clientes parece limpia y homog√©nea, con pocos outliers.")

            df_clientes = pd.read_csv("Clientes_transformados.csv")

            # Histograma de edades
            st.markdown("### üìä Distribuci√≥n de edades")
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.histplot(df_clientes["Edad"], bins=20, kde=True, ax=ax, color="skyblue")
            ax.set_title("Distribuci√≥n de edades de los clientes")
            ax.set_xlabel("Edad")
            ax.set_ylabel("Cantidad")
            st.pyplot(fig)

            # Top 10 localidades
            st.markdown("### üèôÔ∏è Top 10 Localidades con m√°s clientes")
            top_localidades = df_clientes["Localidad"].value_counts().head(10)
            fig2, ax2 = plt.subplots()
            top_localidades.plot(kind="barh", ax=ax2, color="teal")
            ax2.invert_yaxis()
            ax2.set_title("Top 10 Localidades")
            ax2.set_xlabel("Cantidad de clientes")
            st.pyplot(fig2)

            # Mapa geogr√°fico de clientes (si hay coordenadas)
            if "X" in df_clientes.columns and "Y" in df_clientes.columns:
                st.markdown("### üåç Mapa de distribuci√≥n geogr√°fica")
                mapa = folium.Map(location=[df_clientes["Y"].mean(), df_clientes["X"].mean()], zoom_start=5)
                for _, row in df_clientes.iterrows():
                    folium.CircleMarker(
                        location=[row["Y"], row["X"]],
                        radius=2,
                        color='blue',
                        fill=True,
                        fill_opacity=0.6
                    ).add_to(mapa)
                st_folium(mapa, width=700, height=400)

            # Heatmap de correlaciones
            st.markdown("### üî• Correlaci√≥n entre variables num√©ricas")
            corr = df_clientes.select_dtypes(include=['float64', 'int64']).corr()
            fig3, ax3 = plt.subplots()
            sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax3)
            ax3.set_title("Heatmap de correlaciones")
            st.pyplot(fig3)

            # Estad√≠sticas descriptivas
            st.subheader("üìã Estad√≠sticas descriptivas")
            st.dataframe(df_clientes.describe())

        elif dataset_opcion == "Compras":
            st.subheader("üõí Exploraci√≥n de Compras")
            st.markdown("‚úÖ Conclusiones preliminares del an√°lisis de Compras:- El volumen principal de compras se concentra en productos de bajo a mediano precio (menos de $1200).\n-Se compran en promedio 9 unidades por operaci√≥n, con pocas compras mayores a 25 unidades..\n- Proveedor 8, seguido de 12 y 7, domina en volumen de compras..\n- No hay relaci√≥n directa entre Precio y Cantidad, lo que sugiere que el tipo de producto define el patr√≥n m√°s que el monto.\n- Existen outliers en precios que podr√≠an representar productos premium, errores de carga o compras especiales.")
          
            df_compras = pd.read_csv("Compra_transformada.csv")

            # Histograma de cantidad de compras
            st.markdown("### üì¶ Distribuci√≥n de cantidad por compra")
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.histplot(df_compras["Cantidad"], bins=30, kde=True, ax=ax, color="orange")
            ax.set_title("Distribuci√≥n de cantidades por compra")
            ax.set_xlabel("Cantidad")
            ax.set_ylabel("Frecuencia")
            st.pyplot(fig)

            # Top 10 productos m√°s comprados
            st.markdown("### ü•á Top 10 productos m√°s comprados")
            top_productos = df_compras["IdProducto"].value_counts().head(10)
            fig2, ax2 = plt.subplots()
            top_productos.plot(kind="bar", ax=ax2, color="green")
            ax2.set_title("Top 10 productos por frecuencia de compra")
            ax2.set_xlabel("IdProducto")
            ax2.set_ylabel("N√∫mero de compras")
            st.pyplot(fig2)

            # Heatmap de correlaciones
            st.markdown("### üî• Correlaci√≥n entre variables num√©ricas")
            corr_compras = df_compras.select_dtypes(include=['float64', 'int64']).corr()
            fig4, ax4 = plt.subplots()
            sns.heatmap(corr_compras, annot=True, cmap="coolwarm", ax=ax4)
            ax4.set_title("Heatmap de correlaciones - Compras")
            st.pyplot(fig4)

            # Matriz de frecuencia Producto vs Proveedor
            st.markdown("### üßæ Matriz Producto vs Proveedor")
            matriz = pd.crosstab(df_compras['IdProducto'], df_compras['IdProveedor'])
            st.dataframe(matriz.head(10))

            # Visualizaci√≥n bivariada: IdProducto vs Cantidad
            st.markdown("### üìä Relaci√≥n entre Producto y Cantidad Comprada")
            fig3, ax3 = plt.subplots(figsize=(10, 4))
            top_ids = df_compras['IdProducto'].value_counts().head(10).index
            sns.boxplot(data=df_compras[df_compras['IdProducto'].isin(top_ids)],
                        x="IdProducto", y="Cantidad", ax=ax3, palette="pastel")
            ax3.set_title("Distribuci√≥n de cantidades por producto (Top 10)")
            st.pyplot(fig3)



            # Estad√≠sticas descriptivas
            st.subheader("üìã Estad√≠sticas descriptivas")
            st.dataframe(df_compras.describe())


        elif dataset_opcion == "Empleados":
            st.subheader("üëî Exploraci√≥n de Empleados")
            st.markdown("- Vendedores representan la mayor√≠a del staff.\n- Relaci√≥n positiva entre salario medio y rendimiento.\n- Conclusi√≥n: fuerza de ventas clave en el desempe√±o global.")
            st.image("graficos/empleados_cargos.png")

        elif dataset_opcion == "Gastos":
            st.subheader("üí∏ Exploraci√≥n de Gastos")
            st.markdown("- Tipos frecuentes: log√≠stica, servicios e insumos.\n- Sucursales con alto gasto relativo frente a ventas.\n- Conclusi√≥n: oportunidad de control presupuestario por sede.")
            st.image("graficos/gastos_sucursal.png")

        elif dataset_opcion == "Productos":
            st.subheader("üì¶ Exploraci√≥n de Productos")
            st.markdown("- Margen positivo en productos m√°s vendidos.\n- Algunos con exceso de stock o rotaci√≥n lenta.\n- Conclusi√≥n: clave ajustar precios y foco de venta.")
            st.image("graficos/productos_margen.png")

        elif dataset_opcion == "Proveedores":
            st.subheader("üè≠ Exploraci√≥n de Proveedores")
            st.markdown("- Dependencia de pocos proveedores clave.\n- Variabilidad en precios y frecuencia de compra.\n- Conclusi√≥n: posible mejora en condiciones de negociaci√≥n.")
            st.image("graficos/proveedores_top.png")

        elif dataset_opcion == "Sucursales":
            st.subheader("üè¢ Exploraci√≥n de Sucursales")
            st.markdown("- Desempe√±o desigual entre sedes.\n- Diferencias marcadas en volumen de ventas y gastos.\n- Conclusi√≥n: requiere gesti√≥n individualizada y auditor√≠a local.")
            st.image("graficos/sucursales_rendimiento.png")

        elif dataset_opcion == "Ventas":
            st.subheader("üí∞ Exploraci√≥n de Ventas")
            st.markdown("- Canales online y tienda f√≠sica dominan.\n- Picos de venta en ciclos mensuales.\n- Conclusi√≥n: se puede predecir estacionalidad y optimizar promociones.")
            st.image("graficos/ventas_canal.png")

    elif menu == "An√°lisis cruzado":
        st.header("üîÄ An√°lisis cruzado entre √°reas")
        st.info("Pr√≥ximamente: visualizaci√≥n de los 8 an√°lisis clave")

    elif menu == "Modelos de ML":
        st.header("ü§ñ Modelos de Machine Learning")
        st.info("Pr√≥ximamente: predicci√≥n de ventas, segmentaci√≥n, recomendaciones...")

    elif menu == "Mapa de sucursales":
        st.header("üó∫Ô∏è Visualizaci√≥n geogr√°fica")
        st.info("Pr√≥ximamente: integraci√≥n del mapa interactivo de sucursales")

    elif menu == "Descargas":
        st.header("üì• Exportaci√≥n de datos y resultados")
        st.info("Pr√≥ximamente: descarga de reportes, gr√°ficos y predicciones")

else:
    st.warning("üîí Ingres√° la clave correcta para acceder a la app")
